---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
const {
  title,
  description,
  ogImage = "/og.png",
  canonical = "/",
} = Astro.props as {
  title?: string;
  description?: string;
  ogImage?: string;
  canonical?: string;
};
const site = import.meta.env.SITE_URL || "https://ruuley.com";
const cfToken = import.meta.env.PUBLIC_CF_ANALYTICS_TOKEN || "";
const currentPath = Astro.url.pathname;
const isJa = currentPath.startsWith('/ja') || (!currentPath.startsWith('/en') && currentPath !== '/');
const lang = isJa ? 'ja' : 'en';
const defaultTitle = isJa ? "ruuley — 法律を計算可能にする" : "ruuley — Making Law Computable";
const defaultDescription = isJa 
  ? "IR と Validation Gate で、検証とトレースが標準の法令運用へ"
  : "IR and Validation Gate for verification and traceability as standard practice";
const finalTitle = title || defaultTitle;
const finalDescription = description || defaultDescription;

// Generate alternate language URLs for hreflang
const getAlternateUrls = () => {
  // Handle root path
  if (currentPath === '/') {
    return {
      ja: `${site}/ja/`,
      en: `${site}/en/`,
      xDefault: `${site}/en/`
    };
  }
  
  // Extract base path without language prefix
  let basePath = currentPath;
  if (currentPath.startsWith('/ja/')) {
    basePath = currentPath.replace('/ja', '');
  } else if (currentPath.startsWith('/en/')) {
    basePath = currentPath.replace('/en', '');
  }
  
  // Ensure base path starts with /
  if (!basePath.startsWith('/')) {
    basePath = '/' + basePath;
  }
  
  // Generate language-specific paths
  const jaPath = basePath === '/' ? '/ja/' : `/ja${basePath}`;
  const enPath = basePath === '/' ? '/en/' : `/en${basePath}`;
  
  return {
    ja: `${site}${jaPath}`,
    en: `${site}${enPath}`,
    xDefault: `${site}${enPath}`
  };
};
const alternates = getAlternateUrls();

// Generate breadcrumb items
const getBreadcrumbItems = () => {
  const items = [
    {
      "@type": "ListItem",
      "position": 1,
      "name": isJa ? "ホーム" : "Home",
      "item": `${site}${isJa ? '/ja/' : '/en/'}`
    }
  ];
  
  // Skip root paths
  if (currentPath === '/' || currentPath === '/ja/' || currentPath === '/en/') {
    return items;
  }
  
  // Extract path segments
  const segments = currentPath.split('/').filter(s => s && s !== 'ja' && s !== 'en');
  
  if (segments.length === 0) {
    return items;
  }
  
  // Map segments to names
  const segmentNames: Record<string, { ja: string; en: string }> = {
    'products': { ja: '製品', en: 'Products' },
    'solutions': { ja: 'ソリューション', en: 'Solutions' },
    'docs': { ja: 'ドキュメント', en: 'Documentation' },
    'pricing': { ja: '価格', en: 'Pricing' },
    'ai': { ja: 'AI Copilot', en: 'AI Copilot' },
    'contact': { ja: 'お問い合わせ', en: 'Contact' }
  };
  
  let breadcrumbPath = isJa ? '/ja/' : '/en/';
  segments.forEach((segment, index) => {
    breadcrumbPath += segment + (index < segments.length - 1 ? '/' : '/');
    const names = segmentNames[segment] || { ja: segment, en: segment };
    items.push({
      "@type": "ListItem",
      "position": index + 2,
      "name": isJa ? names.ja : names.en,
      "item": `${site}${breadcrumbPath}`
    });
  });
  
  return items;
};

const breadcrumbItems = getBreadcrumbItems();
---
<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{finalTitle}</title>
    <meta name="description" content={finalDescription} />
    <link rel="canonical" href={`${site}${canonical}`} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={finalTitle} />
    <meta property="og:description" content={finalDescription} />
    <meta property="og:url" content={`${site}${canonical}`} />
    <meta property="og:image" content={`${site}${ogImage}`} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={finalTitle} />
    <meta name="twitter:description" content={finalDescription} />
    <meta name="twitter:image" content={`${site}${ogImage}`} />
    <meta name="twitter:image:alt" content={finalDescription} />
    <meta name="theme-color" content="#0b1220" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    {/* hreflang tags for internationalization */}
    <link rel="alternate" href={alternates.ja} hreflang="ja" />
    <link rel="alternate" href={alternates.en} hreflang="en" />
    <link rel="alternate" href={alternates.xDefault} hreflang="x-default" />
    {/* Structured Data - Organization (only on homepage) */}
    {(currentPath === '/' || currentPath === '/ja/' || currentPath === '/en/') && (
      <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "ruuley",
        "url": site,
        "logo": `${site}/favicon.svg`,
        "sameAs": [],
        "contactPoint": [{
          "@type": "ContactPoint",
          "contactType": "sales",
          "url": `${site}${isJa ? '/ja/contact' : '/en/contact'}`
        }]
      })} />
    )}
    {/* Structured Data - Breadcrumb (all pages) */}
    {breadcrumbItems.length > 1 && (
      <script type="application/ld+json" set:html={JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": breadcrumbItems
      })} />
    )}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="/styles/global.css" />
  </head>
  <body>
    <a href="#main-content" class="skip-link">{isJa ? "メインコンテンツへスキップ" : "Skip to main content"}</a>
    <Header />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
    {cfToken && (
      <script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon={`{\"token\":\"${cfToken}\"}`}></script>
    )}
  </body>
</html>
